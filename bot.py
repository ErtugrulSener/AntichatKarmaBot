import json
import random
import sys
import threading
import time
from itertools import cycle

import requests
from faker import Faker

from utils import safelist


class Bot:
    USERNAME = 1
    PASSWORD = 2
    PROXY_LIST = 3

    def __init__(self):
        # Input values
        self.username = sys.argv[self.USERNAME]
        self.password = sys.argv[self.PASSWORD]
        self.proxy_list = safelist(sys.argv).get(self.PROXY_LIST, "proxylist.txt")

        # Bot values
        self.fake_data = Faker()
        self.user_id = None
        self.name = None
        self.retry = 0
        self.message_counter = 0

        self.proxies = self.get_proxies_from_file()
        self.proxy_pool = cycle(self.proxies)
        self.proxy = next(self.proxy_pool)

        # Hardcoded API values
        self.application_id = "fUEmHsDqbr9v73s4JBx0CwANjDJjoMcDFlrGqgY5"
        self.client_version = "js1.11.1"
        self.installation_id = "c9165079-def7-3b6e-18ee-aee875c2e818"

        # Set the groups you want the bots to chat here.
        # Attention: More than 3 groups could trigger the bansystem of antichat.
        # Feel free to use the private groups I created.
        self.groups = ["vDqRPhZLNi", "7eyQpyYtoB", "fecwhZEVXV"]

        # Set the id of the one, who will receive the karma generated by the bots.
        self.karma_receiver_id = "qLQqSw9uHJ"

        # Get login data
        self.get_login_data()

        # Purchase gifts if bot has enough rest karma from last execution
        self.purchase_gift()

    def get_login_data(self):
        login_url = "https://mobile-elb.antich.at/login"
        login_params = {
            "username": self.username,
            "password": self.password,
            "_ApplicationId": self.application_id,
            "_ClientVersion": self.client_version,
            "_InstallationId": self.installation_id,
            "_method": "GET",
        }

        login_data = requests.post(login_url, login_params).json()

        self.user_id = login_data['objectId']
        self.name = login_data['profileName']
        self.session_token = login_data['sessionToken']

        return login_data

    def create_fake_message(self):
        fake_messages = [f"I love you all <3",
                         f"Hahahahahaha",
                         f"Yeah that's nice, haha",
                         f"Selamün aleyküm",
                         f"Irgendwelche Leute da zum Schreiben?",
                         f"Hey Leute",
                         f"Bock auf ne Pfeife?",
                         f"Poky biatch",
                         f"biaaaaatch",
                         f"So dumb xD",
                         f"xDDDD",
                         f":D",
                         f"Who want's me?",
                         f"Blizzard's nice",
                         f"{self.fake_data.text()}"]

        return fake_messages

    def purchase_gift(self):
        purchase_gift_url = "https://mobile-elb.antich.at/functions/purchaseGift"
        purchase_gift_params = {
            "artifactName": "rose",
            "currency": "karma",
            "receiverId": self.karma_receiver_id,
            "v": 10001,
            "_ApplicationId": self.application_id,
            "_ClientVersion": self.client_version,
            "_InstallationId": self.installation_id,
            "_SessionToken": self.session_token,
        }

        karma = self.get_karma()

        while karma >= 1000:
            purchase_gift_data = requests.post(purchase_gift_url, purchase_gift_params)

            if purchase_gift_data.status_code != 400:
                print(f"Purchased gift and sent to receiver with id: {self.karma_receiver_id}!")
                karma = self.get_karma()
            else:
                print(purchase_gift_data.json())

    def get_karma(self):
        get_karma_url = "https://mobile-elb.antich.at/functions/getUserData"
        get_karma_params = {
            "userId": self.user_id,
            "_ApplicationId": self.application_id,
            "_ClientVersion": self.client_version,
            "_InstallationId": self.installation_id,
            "_SessionToken": self.session_token,
        }

        get_karma_data = requests.post(get_karma_url, get_karma_params).json()
        karma = get_karma_data['result']['karma']

        return karma

    def get_proxies_from_file(self):
        with open(self.proxy_list, "r") as f:
            return set(f.read().splitlines())

    def send_group_messages(self):
        send_message_url = "https://mobile-elb.antich.at/classes/Messages"
        send_message_headers = {'content-type': 'application/json'}

        for d in range(len(self.groups)):
            send_message_params = {
                "antiFlood": False,
                "dialogue": self.groups[d],
                "message": random.choice(self.create_fake_message()),
                "receiver": "group",
                "_ApplicationId": self.application_id,
                "_ClientVersion": self.client_version,
                "_InstallationId": self.installation_id,
                "_SessionToken": self.session_token,
            }

            if self.proxy_list:
                done = False
                to_remove = []

                while not done:
                    try:
                        login_data = requests.post(url=send_message_url, json=send_message_params, headers=send_message_headers, proxies={"http": self.proxy, "https": self.proxy}, timeout=4)
                        done = True
                    except:
                        to_remove.append(self.proxy)
                        self.proxy = next(self.proxy_pool)

                if len(to_remove) > 0:
                    for pr in to_remove:
                        try:
                            self.proxies.remove(pr)
                            print(pr + " removed.")
                        except KeyError:
                            # removed by other instance already
                            pass

                    with open(self.proxy_list, "w") as fw:
                        fw.writelines('\n'.join(self.proxies))

                    self.proxy_pool = cycle(self.proxies)

            else:
                login_data = requests.post(url=send_message_url, json=send_message_params, headers=send_message_headers)

            if login_data.status_code == 201:
                print(f"{self.message_counter} : {self.name}: Message sent succesfully. Sleeping for some seconds.")

                self.message_counter += 1
                if self.message_counter % 100 == 0:
                    threading.Thread(target=self.purchase_gift).start()
                elif self.message_counter % 3 == 0:
                    self.proxy = next(self.proxy_pool)
                # elif self.message_counter == 550:
                #     time.sleep(600)

            else:
                print(login_data.status_code, login_data.text)

                self.retry += 1

                if self.retry >= 9:
                    sys.exit()
                elif self.retry % 3 == 0:
                    session_token = self.get_login_data().get('sessionToken')

                    # New session_token created, set retry counter to 0
                    if session_token:
                        self.retry = 0

                    time.sleep(15)


if __name__ == "__main__":
    ertu_bot = Bot()

    while True:
        ertu_bot.send_group_messages()
